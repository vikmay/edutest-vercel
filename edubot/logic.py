
# -*- coding: utf-8 -*-
"""
Telegram EduTest logic (webhook-friendly).
- Uses Postgres (Supabase/Neon) via pg8000 (see edubot.db).
- Reads question banks from bank/*.json (read-only).
- No /import (FS is read-only on Vercel Free).
"""

import os, json, random
from pathlib import Path
from datetime import datetime, timedelta
from typing import Any, Dict, List, Optional, Tuple, Set

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from telegram.constants import ParseMode
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ConversationHandler, ContextTypes, filters
)

from . import db

BANK_DIR = Path(os.environ.get("QUIZ_BANK_DIR","bank"))
ADMIN_IDS = {int(x) for x in os.environ.get("ADMIN_IDS","").split(",") if x.strip().isdigit()}
TOKEN = os.environ.get("TELEGRAM_TOKEN")

ASK_NAME = 1

def is_admin(uid: int) -> bool:
    return uid in ADMIN_IDS

# === Bank helpers ===
def load_all_questions() -> List[Dict[str, Any]]:
    items: List[Dict[str, Any]] = []
    for p in BANK_DIR.glob("*.json"):
        try:
            with open(p, "r", encoding="utf-8") as f:
                data = json.load(f)
                if isinstance(data, list):
                    items.extend(data)
        except Exception:
            continue
    return items

def list_topics() -> Dict[str,int]:
    topics: Dict[str,int] = {}
    for q in load_all_questions():
        t = q.get("topic") or "–ë–µ–∑ —Ç–µ–º–∏"
        topics[t] = topics.get(t, 0) + 1
    return dict(sorted(topics.items(), key=lambda x: x[0].lower()))

def select_questions(topic: str, n: int, shuffle_opts: bool=True) -> List[Dict[str, Any]]:
    pool = [q for q in load_all_questions() if (q.get("topic") or "") == topic]
    random.shuffle(pool)
    picked = pool[:min(n, len(pool))]
    if shuffle_opts:
        for q in picked:
            if "options" in q and isinstance(q["options"], list):
                random.shuffle(q["options"])
    return picked

def badge(ok: bool) -> str: return "üü©" if ok else "üü•"

def render_single(q: Dict[str, Any]) -> Tuple[str, InlineKeyboardMarkup]:
    kb = [[InlineKeyboardButton(text=opt, callback_data=f"ans::{opt}")] for opt in q.get("options",[])]
    return q["question"], InlineKeyboardMarkup(kb)

def render_multi(q: Dict[str, Any], chosen: Optional[Set[str]] = None) -> Tuple[str, InlineKeyboardMarkup]:
    if chosen is None: chosen = set()
    rows = []
    for opt in q.get("options", []):
        label = ("‚úÖ " if opt in chosen else "") + opt
        rows.append([InlineKeyboardButton(text=label, callback_data=f"multi::{opt}")])
    rows.append([InlineKeyboardButton(text="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="multi::confirm")])
    return q["question"], InlineKeyboardMarkup(rows)

def render_match_blocks(left: List[str], right: List[str]) -> str:
    letters = [chr(ord('A') + i) for i in range(len(left))]
    nums = [str(i+1) for i in range(len(right))]
    lb = "\n".join([f"{letters[i]}) {left[i]}" for i in range(len(left))])
    rb = "\n".join([f"{nums[i]}) {right[i]}" for i in range(len(right))])
    return f"{lb}\n\n{rb}\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å —è–∫: A-2,B-1,C-3"

def parse_args(text: str) -> Dict[str,str]:
    import re
    out = {}
    for part in re.split(r"\s+", text.strip()):
        if "=" in part:
            k,v = part.split("=",1)
            out[k.strip().lower()] = v.strip()
    return out

# === Handlers ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    u = db.ensure_user(user.id, user.full_name or "")
    if not u["full_name"]:
        await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –í–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, *—ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ* –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º (–Ω–∞–ø—Ä.: `–û–ª–µ–Ω–∞ –ü–µ—Ç—Ä–µ–Ω–∫–æ`).", parse_mode=ParseMode.MARKDOWN)
        return ASK_NAME
    if u["approved"] == 1:
        await update.message.reply_text(
            "–í–∞—Å –≤—ñ—Ç–∞—î EduTest –±–æ—Ç (—Ö–º–∞—Ä–∞) üëã\n"
            "–ö–æ–º–∞–Ω–¥–∏:\n"
            "‚Ä¢ /topics ‚Äî —Ç–µ–º–∏\n"
            "‚Ä¢ /test ‚Äî –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç (–∞–±–æ `/test topic=–ü–ª–∞–Ω—ñ–º–µ—Ç—Ä—ñ—è n=10 time=8`)\n"
            "‚Ä¢ /score ‚Äî –º—ñ–π –ø—Ä–æ–≥—Ä–µ—Å\n"
            "‚Ä¢ /leaderboard ‚Äî —Ç–∞–±–ª–æ (–∞–±–æ `/leaderboard topic=–ü–ª–∞–Ω—ñ–º–µ—Ç—Ä—ñ—è`)\n"
            "‚Ä¢ /help ‚Äî –¥–æ–≤—ñ–¥–∫–∞"
        )
        return ConversationHandler.END
    else:
        await update.message.reply_text("–î—è–∫—É—î–º–æ! –ó–∞—á–µ–∫–∞–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return ConversationHandler.END

async def save_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = (update.message.text or "").strip()
    if len(name.split()) < 2:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å *—ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ* (–¥–≤–∞ —Å–ª–æ–≤–∞).", parse_mode=ParseMode.MARKDOWN)
        return ASK_NAME
    db.set_user_name(update.effective_user.id, name)
    await update.message.reply_text("–î—è–∫—É—î–º–æ! –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    return ConversationHandler.END

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–≤—ñ–¥–∫–∞:\n"
        "/topics ‚Äî –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç–µ–º–∏\n"
        "/test ‚Äî –ø–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç\n"
        "/score ‚Äî –≤–∞—à—ñ –±–∞–ª–∏\n"
        "/leaderboard [topic=...] ‚Äî —Ç–∞–±–ª–æ\n"
        "–ê–¥–º—ñ–Ω: /pending, /approve <tg_id>, /ban <tg_id>\n"
        "–ü—Ä–∏–º—ñ—Ç–∫–∞: —É —Ö–º–∞—Ä–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó —ñ–º–ø–æ—Ä—Ç —Ñ–∞–π–ª—ñ–≤ —É —á–∞—Ç—ñ –≤–∏–º–∫–Ω–µ–Ω–æ. –î–æ–¥–∞–≤–∞–π—Ç–µ —Ç–µ–º–∏ —è–∫ JSON —É —Ç–µ–∫—É bank/ —Ç–∞ –¥–µ–ø–ª–æ–π—Ç–µ."
    )

async def topics_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    t = list_topics()
    if not t:
        await update.message.reply_text("–¢–µ–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –î–æ–¥–∞–π—Ç–µ –±–∞–Ω–∫ –ø–∏—Ç–∞–Ω—å —É —Ç–µ–∫—É bank/.")
        return
    lines = [f"‚Ä¢ {k} ‚Äî {v} –ø–∏—Ç–∞–Ω—å" for k,v in t.items()]
    await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ñ —Ç–µ–º–∏:\n" + "\n".join(lines))

async def test_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # check approved
    if db.ensure_user(update.effective_user.id).get("approved") != 1:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø —â–µ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    text = update.message.text or ""
    args = parse_args(text.replace("/test","",1))
    topics = list_topics()
    if not topics:
        await update.message.reply_text("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–µ–º. –î–æ–¥–∞–π—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è —É —Ç–µ–∫—É bank/.")
        return

    topic = args.get("topic")
    if not topic:
        if len(topics) == 1:
            topic = next(iter(topics.keys()))
        else:
            buttons = [[InlineKeyboardButton(text=k, callback_data=f"choose_topic::{k}")] for k in topics.keys()]
            await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É:", reply_markup=InlineKeyboardMarkup(buttons))
            return
    if topic not in topics:
        await update.message.reply_text(f"–¢–µ–º–∏ ¬´{topic}¬ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ /topics")
        return

    try:
        n = int(args.get("n","10"))
    except: n = 10
    try:
        minutes = int(args.get("time","0"))
    except: minutes = 0

    await start_quiz(update, context, topic=topic, n=n, minutes=minutes)

async def choose_topic_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    topic = query.data.split("::",1)[1]
    await start_quiz(update, context, topic=topic, n=10, minutes=0)

def start_new_session(tg_id: int, topic: str, total: int, timer_minutes: int) -> int:
    return db.start_session(tg_id, topic, total, timer_minutes)

async def start_quiz(update_or_query, context: ContextTypes.DEFAULT_TYPE, topic: str, n: int, minutes: int):
    is_query = hasattr(update_or_query, "callback_query") and update_or_query.callback_query
    send = (update_or_query.callback_query.message.reply_text if is_query else update_or_query.message.reply_text)
    user = update_or_query.effective_user

    questions = select_questions(topic, n, shuffle_opts=True)
    if not questions:
        await send("–£ –≤–∏–±—Ä–∞–Ω—ñ–π —Ç–µ–º—ñ –Ω–µ–º–∞—î –ø–∏—Ç–∞–Ω—å.")
        return

    session_id = start_new_session(user.id, topic, len(questions), minutes)
    deadline = None
    if minutes and minutes > 0:
        deadline = datetime.utcnow() + timedelta(minutes=minutes)

    context.user_data["quiz"] = {
        "topic": topic,
        "questions": questions,
        "current": 0,
        "score": 0,
        "session_id": session_id,
        "details": [],
        "deadline": deadline
    }
    await send(f"–ü–æ—á–∏–Ω–∞—î–º–æ —Ç–µ—Å—Ç –∑ —Ç–µ–º–∏ *{topic}* ({len(questions)} –ø–∏—Ç–∞–Ω—å){' ‚Äî —á–∞—Å ' + str(minutes) + ' —Ö–≤.' if minutes else ''}. –£—Å–ø—ñ—Ö—ñ–≤!",
               parse_mode=ParseMode.MARKDOWN)
    await send_next_question(update_or_query, context)

async def send_next_question(update_or_query, context: ContextTypes.DEFAULT_TYPE):
    st = context.user_data.get("quiz")
    if not st: return
    send = (update_or_query.callback_query.message.reply_text if hasattr(update_or_query, "callback_query") and update_or_query.callback_query
            else update_or_query.message.reply_text)

    idx = st["current"]
    if idx >= len(st["questions"]):
        await finish_quiz(update_or_query, context)
        return

    time_note = ""
    if st.get("deadline"):
        left = (st["deadline"] - datetime.utcnow()).total_seconds()
        if left <= 0:
            await finish_quiz(update_or_query, context)
            return
        mins = int(left // 60); secs = int(left % 60)
        time_note = f"\n‚è≥ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {mins:02d}:{secs:02d}"

    q = st["questions"][idx]
    qtype = q.get("type","single")
    header = f"*–ü–∏—Ç–∞–Ω–Ω—è {idx+1}/{len(st['questions'])}*{time_note}\n"

    if qtype == "single":
        text, kb = render_single(q)
        await send(header + text, reply_markup=kb, parse_mode=ParseMode.MARKDOWN)
        context.user_data["await"] = ("single", q)
    elif qtype == "multi":
        text, kb = render_multi(q, chosen=set())
        await send(header + text, reply_markup=kb, parse_mode=ParseMode.MARKDOWN)
        context.user_data["await"] = ("multi", q, set())
    elif qtype == "match":
        right = q.get("match_right", [])[:]
        random.shuffle(right)
        context.user_data["await"] = ("match", q, right)
        blocks = render_match_blocks(q.get("match_left", []), right)
        await send(header + q.get("question","") + "\n\n" + blocks, parse_mode=ParseMode.MARKDOWN)
    else:
        await send("–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø–∏—Ç–∞–Ω–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ.")
        st["current"] += 1
        await send_next_question(update_or_query, context)

async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query; await query.answer()
    aw = context.user_data.get("await")
    st = context.user_data.get("quiz")
    if not aw or not st: return
    kind = aw[0]

    if kind == "single":
        q = aw[1]
        chosen = query.data.split("::",1)[1]
        correct = q.get("answer","")
        ok = (chosen == correct)
        if ok: st["score"] += 1
        st["details"].append({"id": q.get("id"), "type":"single","chosen":chosen,"correct":correct,"ok":ok})
        await query.message.reply_text(f"{badge(ok)} {'–ü—Ä–∞–≤–∏–ª—å–Ω–æ!' if ok else '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.'}\n–ü—Ä–∞–≤–∏–ª—å–Ω–∞: *{correct}*\n\n{q.get('explanation','')}", parse_mode=ParseMode.MARKDOWN)
        st["current"] += 1
        await send_next_question(update, context)

    elif kind == "multi":
        q, chosen = aw[1], aw[2]
        payload = query.data.split("::",1)[1]
        if payload == "confirm":
            correct_set = set(q.get("answers",[]))
            ok = (chosen == correct_set)
            if ok: st["score"] += 1
            st["details"].append({"id": q.get("id"), "type":"multi","chosen":sorted(list(chosen)),"correct":sorted(list(correct_set)),"ok":ok})
            await query.message.reply_text(f"{badge(ok)} {'–ü—Ä–∞–≤–∏–ª—å–Ω–æ!' if ok else '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.'}\n–ü—Ä–∞–≤–∏–ª—å–Ω—ñ: *{', '.join(correct_set)}*\n\n{q.get('explanation','')}", parse_mode=ParseMode.MARKDOWN)
            st["current"] += 1
            await send_next_question(update, context)
        else:
            opt = payload
            if opt in chosen: chosen.remove(opt)
            else: chosen.add(opt)
            text, kb = render_multi(q, chosen)
            await query.message.edit_reply_markup(reply_markup=kb)
            context.user_data["await"] = ("multi", q, chosen)

async def on_text_for_match(update: Update, context: ContextTypes.DEFAULT_TYPE):
    aw = context.user_data.get("await"); st = context.user_data.get("quiz")
    if not aw or aw[0] != "match" or not st: return
    q = aw[1]
    shown_right = aw[2]
    letters = [chr(ord('A') + i) for i in range(len(q.get("match_left",[])))]
    nums = [str(i+1) for i in range(len(shown_right))]
    text = (update.message.text or "").upper().replace(" ", "")
    try:
        parsed = []
        for part in [x for x in text.split(",") if x]:
            a,b = part.split("-",1)
            if a not in letters or b not in nums: raise ValueError("–ù–µ–≤—ñ—Ä–Ω—ñ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è.")
            parsed.append((letters.index(a), nums.index(b)))
        shown_to_orig = {i: q.get("match_right", []).index(shown_right[i]) for i in range(len(shown_right))}
        correct_pairs = set(tuple(x) for x in q.get("pairs", []))
        user_pairs = set((li, shown_to_orig[ri]) for (li, ri) in parsed)
        ok = (user_pairs == correct_pairs)
        if ok: st["score"] += 1
        st["details"].append({"id": q.get("id"), "type":"match","chosen_pairs":sorted(list(user_pairs)),"correct_pairs":sorted(list(correct_pairs)),"ok":ok})
        await update.message.reply_text(f"{badge(ok)} {'–ü—Ä–∞–≤–∏–ª—å–Ω–æ!' if ok else '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.'}\n\n{q.get('explanation','')}")
        st["current"] += 1
        await send_next_question(update, context)
    except Exception:
        await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –§–æ—Ä–º–∞—Ç: A-1,B-3,C-2 ...")

async def finish_quiz(update_or_query, context: ContextTypes.DEFAULT_TYPE):
    st = context.user_data.get("quiz")
    if not st: return
    score = st["score"]; total = len(st["questions"])
    db.finish_session(st["session_id"], score, st["details"])
    db.add_points(update_or_query.effective_user.id, score, topic=st["topic"])
    context.user_data["quiz"] = None
    send = (update_or_query.callback_query.message.reply_text if hasattr(update_or_query, "callback_query") and update_or_query.callback_query
            else update_or_query.message.reply_text)
    await send(f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç: *{score}/{total}*.", parse_mode=ParseMode.MARKDOWN)

async def score_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pts = db.get_user_points(update.effective_user.id)
    await update.message.reply_text(f"–í–∞—à—ñ –±–∞–ª–∏: *{pts}*", parse_mode=ParseMode.MARKDOWN)

async def leaderboard_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "")
    topic = None
    if "topic=" in text:
        topic = text.split("topic=",1)[1].strip()
    rows = db.top_scores(limit=15, topic=topic)
    if not rows:
        await update.message.reply_text("–©–µ –Ω–µ–º–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.")
        return
    title = "üèÜ –¢–∞–±–ª–æ –ª—ñ–¥–µ—Ä—ñ–≤" + (f" ‚Äî {topic}" if topic else "")
    lines = [f"{i+1}. {name or '–Ω–µ–≤—ñ–¥–æ–º–æ'} ‚Äî {pts}" for i,(name,pts) in enumerate(rows)]
    await update.message.reply_text(title + ":\n" + "\n".join(lines))

async def pending_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id): return
    rows = db.list_pending()
    if not rows:
        await update.message.reply_text("–ù–µ–º–∞—î –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")
        return
    txt = "–ó–∞—è–≤–∫–∏:\n" + "\n".join([f"‚Ä¢ {r[1] or '(–±–µ–∑ —ñ–º–µ–Ω—ñ)'} ‚Äî `{r[0]}`" for r in rows])
    await update.message.reply_text(txt, parse_mode=ParseMode.MARKDOWN)

async def approve_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id): return
    if not context.args:
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /approve <tg_id>")
        return
    try:
        uid = int(context.args[0])
    except:
        await update.message.reply_text("tg_id –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
        return
    db.set_approved(uid, 1)
    await update.message.reply_text(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{uid}` –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ ‚úÖ", parse_mode=ParseMode.MARKDOWN)

async def ban_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id): return
    if not context.args:
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /ban <tg_id>")
        return
    try:
        uid = int(context.args[0])
    except:
        await update.message.reply_text("tg_id –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
        return
    db.set_approved(uid, 0)
    await update.message.reply_text(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{uid}` –≤–∏–º–∫–Ω–µ–Ω–æ ‚ùå", parse_mode=ParseMode.MARKDOWN)

# === Factory ===
def build_application() -> Application:
    if not TOKEN:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω–æ TELEGRAM_TOKEN")
    db.ensure_schema()
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_name)]},
        fallbacks=[CommandHandler("help", help_cmd)],
    ))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("topics", topics_cmd))
    app.add_handler(CommandHandler("test", test_cmd))
    app.add_handler(CallbackQueryHandler(choose_topic_cb, pattern=r"^choose_topic::"))
    app.add_handler(CallbackQueryHandler(on_button, pattern=r"^(ans|multi)::"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text_for_match))
    app.add_handler(CommandHandler("score", score_cmd))
    app.add_handler(CommandHandler("leaderboard", leaderboard_cmd))
    # admin
    app.add_handler(CommandHandler("pending", pending_cmd))
    app.add_handler(CommandHandler("approve", approve_cmd))
    app.add_handler(CommandHandler("ban", ban_cmd))
    return app
